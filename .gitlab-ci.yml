image: python:3

variables:
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE/app
  DOCKER_DRIVER: overlay2

stages:
  - test
  - build

code_quality:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]

test_backend:
  stage: test
  script:
    - pip install -r requirements.txt
    - pip install -r dev_requirements.txt
    - nosetests -v --with-coverage --cover-erase --cover-package=backend

build_images:
  stage: build
  image: docker:stable
  services:
   - docker:dind
  only:
    - master
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $CONTAINER_IMAGE:latest || true
    - docker build --cache-from $CONTAINER_IMAGE:latest --tag $CONTAINER_IMAGE:$CI_BUILD_REF --tag $CONTAINER_IMAGE:latest -f deploy/app/Dockerfile .
    - docker push $CONTAINER_IMAGE:$CI_BUILD_REF
    - docker push $CONTAINER_IMAGE:latest

build_release_images:
  stage: build
  image: docker:stable
  services:
   - docker:dind
  only:
    - tags
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull $CONTAINER_IMAGE:latest || true
    - docker build --cache-from $CONTAINER_IMAGE:latest --tag $CONTAINER_IMAGE:$CI_COMMIT_TAG --tag $CONTAINER_IMAGE:latest -f deploy/app/Dockerfile .
    - docker push $CONTAINER_IMAGE:$CI_COMMIT_TAG
    - docker push $CONTAINER_IMAGE:latest